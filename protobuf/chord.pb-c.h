/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: chord.proto */

#ifndef PROTOBUF_C_chord_2eproto__INCLUDED
#define PROTOBUF_C_chord_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Node Node;
typedef struct _NotifyRequest NotifyRequest;
typedef struct _NotifyResponse NotifyResponse;
typedef struct _FindSuccRequest FindSuccRequest;
typedef struct _FindSuccResponse FindSuccResponse;
typedef struct _RFindSuccRequest RFindSuccRequest;
typedef struct _RFindSuccResponse RFindSuccResponse;
typedef struct _GetPredRequest GetPredRequest;
typedef struct _GetPredResponse GetPredResponse;
typedef struct _CheckPredRequest CheckPredRequest;
typedef struct _CheckPredResponse CheckPredResponse;
typedef struct _GetSuccListRequest GetSuccListRequest;
typedef struct _GetSuccListResponse GetSuccListResponse;
typedef struct _ChordMessage ChordMessage;


/* --- enums --- */


/* --- messages --- */

struct  _Node
{
  ProtobufCMessage base;
  uint64_t key;
  uint32_t address;
  uint32_t port;
};
#define NODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&node__descriptor) \
    , 0, 0, 0 }


struct  _NotifyRequest
{
  ProtobufCMessage base;
  Node *node;
};
#define NOTIFY_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&notify_request__descriptor) \
    , NULL }


struct  _NotifyResponse
{
  ProtobufCMessage base;
};
#define NOTIFY_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&notify_response__descriptor) \
     }


struct  _FindSuccRequest
{
  ProtobufCMessage base;
  uint64_t key;
};
#define FIND_SUCC_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&find_succ_request__descriptor) \
    , 0 }


struct  _FindSuccResponse
{
  ProtobufCMessage base;
  Node *node;
};
#define FIND_SUCC_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&find_succ_response__descriptor) \
    , NULL }


struct  _RFindSuccRequest
{
  ProtobufCMessage base;
  uint64_t key;
  Node *requester;
};
#define R_FIND_SUCC_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&r_find_succ_request__descriptor) \
    , 0, NULL }


struct  _RFindSuccResponse
{
  ProtobufCMessage base;
  uint64_t key;
  Node *node;
};
#define R_FIND_SUCC_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&r_find_succ_response__descriptor) \
    , 0, NULL }


struct  _GetPredRequest
{
  ProtobufCMessage base;
};
#define GET_PRED_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_pred_request__descriptor) \
     }


struct  _GetPredResponse
{
  ProtobufCMessage base;
  Node *node;
};
#define GET_PRED_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_pred_response__descriptor) \
    , NULL }


struct  _CheckPredRequest
{
  ProtobufCMessage base;
};
#define CHECK_PRED_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&check_pred_request__descriptor) \
     }


struct  _CheckPredResponse
{
  ProtobufCMessage base;
};
#define CHECK_PRED_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&check_pred_response__descriptor) \
     }


struct  _GetSuccListRequest
{
  ProtobufCMessage base;
};
#define GET_SUCC_LIST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_succ_list_request__descriptor) \
     }


struct  _GetSuccListResponse
{
  ProtobufCMessage base;
  size_t n_successors;
  Node **successors;
};
#define GET_SUCC_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_succ_list_response__descriptor) \
    , 0,NULL }


typedef enum {
  CHORD_MESSAGE__MSG__NOT_SET = 0,
  CHORD_MESSAGE__MSG_NOTIFY_REQ = 2,
  CHORD_MESSAGE__MSG_NOTIFY_RESP = 3,
  CHORD_MESSAGE__MSG_FIND_SUCC_REQ = 4,
  CHORD_MESSAGE__MSG_FIND_SUCC_RESP = 5,
  CHORD_MESSAGE__MSG_GET_PRED_REQ = 6,
  CHORD_MESSAGE__MSG_GET_PRED_RESP = 7,
  CHORD_MESSAGE__MSG_CHECK_PRED_REQ = 8,
  CHORD_MESSAGE__MSG_CHECK_PRED_RESP = 9,
  CHORD_MESSAGE__MSG_GET_SUCC_LIST_REQ = 10,
  CHORD_MESSAGE__MSG_GET_SUCC_LIST_RESP = 11,
  CHORD_MESSAGE__MSG_R_FIND_SUCC_REQ = 12,
  CHORD_MESSAGE__MSG_R_FIND_SUCC_RESP = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CHORD_MESSAGE__MSG)
} ChordMessage__MsgCase;

struct  _ChordMessage
{
  ProtobufCMessage base;
  uint32_t version;
  protobuf_c_boolean has_query_id;
  int32_t query_id;
  ChordMessage__MsgCase msg_case;
  union {
    NotifyRequest *notify_req;
    NotifyResponse *notify_resp;
    FindSuccRequest *find_succ_req;
    FindSuccResponse *find_succ_resp;
    GetPredRequest *get_pred_req;
    GetPredResponse *get_pred_resp;
    CheckPredRequest *check_pred_req;
    CheckPredResponse *check_pred_resp;
    GetSuccListRequest *get_succ_list_req;
    GetSuccListResponse *get_succ_list_resp;
    RFindSuccRequest *r_find_succ_req;
    RFindSuccResponse *r_find_succ_resp;
  };
};
#define CHORD_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&chord_message__descriptor) \
    , 417u, 0, 0, CHORD_MESSAGE__MSG__NOT_SET, {0} }


/* Node methods */
void   node__init
                     (Node         *message);
size_t node__get_packed_size
                     (const Node   *message);
size_t node__pack
                     (const Node   *message,
                      uint8_t             *out);
size_t node__pack_to_buffer
                     (const Node   *message,
                      ProtobufCBuffer     *buffer);
Node *
       node__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   node__free_unpacked
                     (Node *message,
                      ProtobufCAllocator *allocator);
/* NotifyRequest methods */
void   notify_request__init
                     (NotifyRequest         *message);
size_t notify_request__get_packed_size
                     (const NotifyRequest   *message);
size_t notify_request__pack
                     (const NotifyRequest   *message,
                      uint8_t             *out);
size_t notify_request__pack_to_buffer
                     (const NotifyRequest   *message,
                      ProtobufCBuffer     *buffer);
NotifyRequest *
       notify_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   notify_request__free_unpacked
                     (NotifyRequest *message,
                      ProtobufCAllocator *allocator);
/* NotifyResponse methods */
void   notify_response__init
                     (NotifyResponse         *message);
size_t notify_response__get_packed_size
                     (const NotifyResponse   *message);
size_t notify_response__pack
                     (const NotifyResponse   *message,
                      uint8_t             *out);
size_t notify_response__pack_to_buffer
                     (const NotifyResponse   *message,
                      ProtobufCBuffer     *buffer);
NotifyResponse *
       notify_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   notify_response__free_unpacked
                     (NotifyResponse *message,
                      ProtobufCAllocator *allocator);
/* FindSuccRequest methods */
void   find_succ_request__init
                     (FindSuccRequest         *message);
size_t find_succ_request__get_packed_size
                     (const FindSuccRequest   *message);
size_t find_succ_request__pack
                     (const FindSuccRequest   *message,
                      uint8_t             *out);
size_t find_succ_request__pack_to_buffer
                     (const FindSuccRequest   *message,
                      ProtobufCBuffer     *buffer);
FindSuccRequest *
       find_succ_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   find_succ_request__free_unpacked
                     (FindSuccRequest *message,
                      ProtobufCAllocator *allocator);
/* FindSuccResponse methods */
void   find_succ_response__init
                     (FindSuccResponse         *message);
size_t find_succ_response__get_packed_size
                     (const FindSuccResponse   *message);
size_t find_succ_response__pack
                     (const FindSuccResponse   *message,
                      uint8_t             *out);
size_t find_succ_response__pack_to_buffer
                     (const FindSuccResponse   *message,
                      ProtobufCBuffer     *buffer);
FindSuccResponse *
       find_succ_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   find_succ_response__free_unpacked
                     (FindSuccResponse *message,
                      ProtobufCAllocator *allocator);
/* RFindSuccRequest methods */
void   r_find_succ_request__init
                     (RFindSuccRequest         *message);
size_t r_find_succ_request__get_packed_size
                     (const RFindSuccRequest   *message);
size_t r_find_succ_request__pack
                     (const RFindSuccRequest   *message,
                      uint8_t             *out);
size_t r_find_succ_request__pack_to_buffer
                     (const RFindSuccRequest   *message,
                      ProtobufCBuffer     *buffer);
RFindSuccRequest *
       r_find_succ_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   r_find_succ_request__free_unpacked
                     (RFindSuccRequest *message,
                      ProtobufCAllocator *allocator);
/* RFindSuccResponse methods */
void   r_find_succ_response__init
                     (RFindSuccResponse         *message);
size_t r_find_succ_response__get_packed_size
                     (const RFindSuccResponse   *message);
size_t r_find_succ_response__pack
                     (const RFindSuccResponse   *message,
                      uint8_t             *out);
size_t r_find_succ_response__pack_to_buffer
                     (const RFindSuccResponse   *message,
                      ProtobufCBuffer     *buffer);
RFindSuccResponse *
       r_find_succ_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   r_find_succ_response__free_unpacked
                     (RFindSuccResponse *message,
                      ProtobufCAllocator *allocator);
/* GetPredRequest methods */
void   get_pred_request__init
                     (GetPredRequest         *message);
size_t get_pred_request__get_packed_size
                     (const GetPredRequest   *message);
size_t get_pred_request__pack
                     (const GetPredRequest   *message,
                      uint8_t             *out);
size_t get_pred_request__pack_to_buffer
                     (const GetPredRequest   *message,
                      ProtobufCBuffer     *buffer);
GetPredRequest *
       get_pred_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_pred_request__free_unpacked
                     (GetPredRequest *message,
                      ProtobufCAllocator *allocator);
/* GetPredResponse methods */
void   get_pred_response__init
                     (GetPredResponse         *message);
size_t get_pred_response__get_packed_size
                     (const GetPredResponse   *message);
size_t get_pred_response__pack
                     (const GetPredResponse   *message,
                      uint8_t             *out);
size_t get_pred_response__pack_to_buffer
                     (const GetPredResponse   *message,
                      ProtobufCBuffer     *buffer);
GetPredResponse *
       get_pred_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_pred_response__free_unpacked
                     (GetPredResponse *message,
                      ProtobufCAllocator *allocator);
/* CheckPredRequest methods */
void   check_pred_request__init
                     (CheckPredRequest         *message);
size_t check_pred_request__get_packed_size
                     (const CheckPredRequest   *message);
size_t check_pred_request__pack
                     (const CheckPredRequest   *message,
                      uint8_t             *out);
size_t check_pred_request__pack_to_buffer
                     (const CheckPredRequest   *message,
                      ProtobufCBuffer     *buffer);
CheckPredRequest *
       check_pred_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   check_pred_request__free_unpacked
                     (CheckPredRequest *message,
                      ProtobufCAllocator *allocator);
/* CheckPredResponse methods */
void   check_pred_response__init
                     (CheckPredResponse         *message);
size_t check_pred_response__get_packed_size
                     (const CheckPredResponse   *message);
size_t check_pred_response__pack
                     (const CheckPredResponse   *message,
                      uint8_t             *out);
size_t check_pred_response__pack_to_buffer
                     (const CheckPredResponse   *message,
                      ProtobufCBuffer     *buffer);
CheckPredResponse *
       check_pred_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   check_pred_response__free_unpacked
                     (CheckPredResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSuccListRequest methods */
void   get_succ_list_request__init
                     (GetSuccListRequest         *message);
size_t get_succ_list_request__get_packed_size
                     (const GetSuccListRequest   *message);
size_t get_succ_list_request__pack
                     (const GetSuccListRequest   *message,
                      uint8_t             *out);
size_t get_succ_list_request__pack_to_buffer
                     (const GetSuccListRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSuccListRequest *
       get_succ_list_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_succ_list_request__free_unpacked
                     (GetSuccListRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSuccListResponse methods */
void   get_succ_list_response__init
                     (GetSuccListResponse         *message);
size_t get_succ_list_response__get_packed_size
                     (const GetSuccListResponse   *message);
size_t get_succ_list_response__pack
                     (const GetSuccListResponse   *message,
                      uint8_t             *out);
size_t get_succ_list_response__pack_to_buffer
                     (const GetSuccListResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSuccListResponse *
       get_succ_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_succ_list_response__free_unpacked
                     (GetSuccListResponse *message,
                      ProtobufCAllocator *allocator);
/* ChordMessage methods */
void   chord_message__init
                     (ChordMessage         *message);
size_t chord_message__get_packed_size
                     (const ChordMessage   *message);
size_t chord_message__pack
                     (const ChordMessage   *message,
                      uint8_t             *out);
size_t chord_message__pack_to_buffer
                     (const ChordMessage   *message,
                      ProtobufCBuffer     *buffer);
ChordMessage *
       chord_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   chord_message__free_unpacked
                     (ChordMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Node_Closure)
                 (const Node *message,
                  void *closure_data);
typedef void (*NotifyRequest_Closure)
                 (const NotifyRequest *message,
                  void *closure_data);
typedef void (*NotifyResponse_Closure)
                 (const NotifyResponse *message,
                  void *closure_data);
typedef void (*FindSuccRequest_Closure)
                 (const FindSuccRequest *message,
                  void *closure_data);
typedef void (*FindSuccResponse_Closure)
                 (const FindSuccResponse *message,
                  void *closure_data);
typedef void (*RFindSuccRequest_Closure)
                 (const RFindSuccRequest *message,
                  void *closure_data);
typedef void (*RFindSuccResponse_Closure)
                 (const RFindSuccResponse *message,
                  void *closure_data);
typedef void (*GetPredRequest_Closure)
                 (const GetPredRequest *message,
                  void *closure_data);
typedef void (*GetPredResponse_Closure)
                 (const GetPredResponse *message,
                  void *closure_data);
typedef void (*CheckPredRequest_Closure)
                 (const CheckPredRequest *message,
                  void *closure_data);
typedef void (*CheckPredResponse_Closure)
                 (const CheckPredResponse *message,
                  void *closure_data);
typedef void (*GetSuccListRequest_Closure)
                 (const GetSuccListRequest *message,
                  void *closure_data);
typedef void (*GetSuccListResponse_Closure)
                 (const GetSuccListResponse *message,
                  void *closure_data);
typedef void (*ChordMessage_Closure)
                 (const ChordMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor node__descriptor;
extern const ProtobufCMessageDescriptor notify_request__descriptor;
extern const ProtobufCMessageDescriptor notify_response__descriptor;
extern const ProtobufCMessageDescriptor find_succ_request__descriptor;
extern const ProtobufCMessageDescriptor find_succ_response__descriptor;
extern const ProtobufCMessageDescriptor r_find_succ_request__descriptor;
extern const ProtobufCMessageDescriptor r_find_succ_response__descriptor;
extern const ProtobufCMessageDescriptor get_pred_request__descriptor;
extern const ProtobufCMessageDescriptor get_pred_response__descriptor;
extern const ProtobufCMessageDescriptor check_pred_request__descriptor;
extern const ProtobufCMessageDescriptor check_pred_response__descriptor;
extern const ProtobufCMessageDescriptor get_succ_list_request__descriptor;
extern const ProtobufCMessageDescriptor get_succ_list_response__descriptor;
extern const ProtobufCMessageDescriptor chord_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_chord_2eproto__INCLUDED */
